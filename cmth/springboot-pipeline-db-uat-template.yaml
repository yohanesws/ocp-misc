apiVersion: v1
kind: Template
labels:
  template: springboot-db-uat-pipeline-template
message: |-
  A Jenkins server will be automatically instantiated in this project to manage
  the Pipeline BuildConfig created by this template.  You will be able to log in to
  it using your OpenShift user credentials.
metadata:
  annotations:
    openshift.io/display-name: Spring Boot UAT Pipeline with Database Config
    description: |-
      This template showcases the new Jenkins Pipeline integration for spring boot in OpenShift,
      which performs continuous integration and deployment right on the platform.
      The template contains a Jenkinsfile - a definition of a multi-stage CI/CD process - that
      leverages the underlying OpenShift platform for dynamic and scalable
      builds. OpenShift integrates the status of your pipeline builds into the web
      console allowing you to see your entire application lifecycle in a single view.
    iconClass: icon-jenkins
    tags: instant-app,springboot,db,uat,jenkins
  name: springboot-db-uat-pipeline-template
parameters:
- description: The name assigned to pipeline defined in this template.
  displayName: Pipeline Name
  name: PIPELINE_NAME
  required: true
- description: The name assigned to application defined in this template.
  displayName: Application Name
  name: APP_NAME
  required: true
- description: The namespace/project of which the application is assigned.
  displayName: Application Namespace/Project
  name: APP_NAMESPACE
  required: true
- description: The database URL/Connection String defined in this template.
  displayName: Database Url
  name: DB_URL
  required: true
- description: The username of database defined in this template.
  displayName: Database Username
  name: DB_USERNAME
  required: true
- description: The password of database defined in this template.
  displayName: Database Password
  name: DB_PASSWORD
  required: true
- description: Need Router Internal
  displayName: Router Internal
  name: NEED_ROUTER_INTERNAL
  required: true
  value: "false"
- description: Need Router Partner
  displayName: Router Partner
  name: NEED_ROUTER_PARTNER
  required: true
  value: "false"
- description: Need Router Public
  displayName: Router Public
  name: NEED_ROUTER_PUBLIC
  required: true
  value: "false"
  value: "false"
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
- description: The Branch of the repository with your application source code.
  displayName: Git Repository Branch
  name: SOURCE_REPOSITORY_BRANCH
  required: true
- description: Git Credential Secret.
  displayName: Git Secret Credential
  name: SOURCE_REPOSITORY_CREDENTIAL_SECRET
  required: true
  value: gitlab-cimb
- description: SonarQube URL for coverage Test.
  displayName: SonarQube URL
  name: SONARQUBE_URL
  required: true
  value: "http://sonarqube-dev-sonar.app-internal.cimbthai.com"
- description: SonarQube Token for coverage Test.
  displayName: SonarQube Token
  name: SONARQUBE_TOKEN
  required: true
  value: "fa3707fbae1672d0c27bd72535b41c2b30f3c14a"
- description: The OpenShift Namespace where the jenkins running.
  displayName: Namespace CICD
  name: NAMESPACE_CICD
  required: true
  value: cicd
- description: External Repository Credential Secret Name.
  displayName: Ext Repo Secret Credential
  name: EXT_REPO_CREDENTIAL_SECRET
  required: true
  value: external-registry-cimb
- description: The Spring Config URI
  displayName: Spring Config URI
  name: SPRING_CONFIG_URI
- description: The OpenShift Namespace where the builder ImageStreams reside.
  displayName: Namespace Builder
  name: NAMESPACE_BUILDER
  required: true
  value: openshift
- description: The name of OpenJDK builder ImageStreams to used.
  displayName: OpenJDK Builder
  name: IMAGE_BUILDER
  value: "redhat-openjdk18-openshift"
  required: true
- description: The version of OpenJDK builder ImageStreams to used.
  displayName: Version Builder
  name: IMAGE_VERSION
  required: true
  value: "1.4"
- description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
  required: true
- description: A secret string used to configure the Generic webhook.
  displayName: Generic Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
  required: true
- description: Suffix Router Internal
  displayName: Suffix Router Internal
  name: SUFFIX_ROUTER_INTERNAL
  required: true
  value: ".app-internal.cimbthai.com"
- description: Suffix Router Partner
  displayName: Suffix Router Partner
  name: SUFFIX_ROUTER_PARTNER
  required: true
  value: ".app-partner.cimbthai.com"
- description: Suffix Router Public
  displayName: Suffix Router Public
  name: SUFFIX_ROUTER_PUBLIC
  required: true
  value: ".app-public.cimbthai.com"
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${PIPELINE_NAME}-db-secret
    namespace: ${NAMESPACE_CICD}
  type: Opaque 
  stringData: 
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      name: ${PIPELINE_NAME}
    name: ${PIPELINE_NAME}
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
          timeout(time: 20, unit: 'MINUTES') {
                def appName="${APP_NAME}"
                def projectTarget="${APP_NAMESPACE}"
                def projectCicd="${NAMESPACE_CICD}"
                def gitRepo="${SOURCE_REPOSITORY_URL}"
                def branch="${SOURCE_REPOSITORY_BRANCH}"
                def secretName="${SOURCE_REPOSITORY_CREDENTIAL_SECRET}"
                def version=""
                def secretDb=""
                def springconfig="${SPRING_CONFIG_URI}"
                def sonarqube="${SONARQUBE_URL}"
                def sonarqubeToken="${SONARQUBE_TOKEN}"
                def needRouterInternal=${NEED_ROUTER_INTERNAL}
                def needRouterPartner=${NEED_ROUTER_PARTNER}
                def needRouterPublic=${NEED_ROUTER_PUBLIC}
                def suffixRouterInternal="${SUFFIX_ROUTER_INTERNAL}"
                def suffixRouterPartner="${SUFFIX_ROUTER_PARTNER}"
                def suffixRouterPublic="${SUFFIX_ROUTER_PUBLIC}"
                def externaRegistrySecret="${EXT_REPO_CREDENTIAL_SECRET}"
                def extRegistry="${EXT_REPO}"


            properties([
              pipelineTriggers([
                  pollSCM('H/5 * * * *')
              ])
            ])

            node(){
                stage('Preparing'){
                  git branch: branch, url: gitRepo , credentialsId: "${projectCicd}-${secretName}", poll: true, changelog: true
                }
            }

            node ('maven') {
              stage("Cloning"){
                git branch: branch, url: gitRepo , credentialsId: "${projectCicd}-${secretName}"
                sh "git for-each-ref --sort=taggerdate --count=1 --format '%(refname:short)' refs/tags | tr -d '\n'| tr '.' '-'> latesttag.txt"
                //sh "cat latesttag.txt|  tr -d '\n' > tag.txt"
                version=readFile('latesttag.txt')
                if (version == "")
                  version="latest"
                echo "version : ${version}"
              }
              stage ("Unit Test"){
                sh "mvn test"
                step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
              }
              stage("Code Analysis") {
                sh "mvn sonar:sonar -Dsonar.host.url=${sonarqube} -Dsonar.login=${sonarqubeToken} -Dsonar.projectName=${appName} -DskipTests=true"
              } 
              stage("Build the Source") {
                sh "mvn clean install -DskipTests=true"
                sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                sh "cp target/*.jar oc-build/deployments/APP.jar"
              }
              stage("Build Image") {
                sh "oc project ${projectTarget}"
                //create JAVA S2I Binary Build
                sh "oc new-build openshift/redhat-openjdk18-openshift:1.4 --name=${appName} --binary  -n ${projectTarget} || true"
                // start build
                sh "oc start-build ${appName} -n ${projectTarget} --from-file=oc-build/deployments/APP.jar --follow --wait"
                sh "oc tag ${projectTarget}/${appName}:latest ${projectTarget}/${appName}:${version}"
              }
              stage ("Configuring") {
                def cmNotPresent = false
                try {
                  sh "oc get cm ${appName}-${version}-cm -o jsonpath='{.metadata.name}' -n ${projectTarget}"
                }catch(err){
                  cmNotPresent = true
                }
                if (cmNotPresent){
                  sh "oc delete cm,secret -l app=${appName}-${version} -n ${projectTarget} || true"
                  sh "rm -rf files-config && mkdir -p files-config"
                  sh "chmod -R 777 src/main/resources"
                  sh "cp src/main/resources/*.properties files-config/ || true"
                  sh "cp src/main/resources/*.yml files-config/ || true"
                  sh "cp src/main/resources/*.yaml files-config/ || true"
                  sh "cp src/main/resources/*.json files-config/ || true"
                  sh "cp src/main/resources/*.xml files-config/ || true"

                  //creating configmap
                  sh "oc create cm ${appName}-${version}-cm --from-file=files-config/ -n ${projectTarget}"
                  sh "oc label cm/${appName}-${version}-cm app=${appName}-${version} -n ${projectTarget}"
                }
                
                
                if (secretDb !=  ""){
                  def secretNotPresent = false
                  try {
                    sh "oc get secret ${appName}-${version}-db -o jsonpath='{.metadata.name}' -n ${projectTarget}"
                  }catch(err){
                    secretNotPresent = true
                  }
                  if (secretNotPresent){
                      //copying secret db
                    sh "oc get secret ${secretDb} -n ${projectCicd} -o template --template='{{.data.password}}'|base64 -d|tr -d '\n' > password.secret"
                    sh "oc get secret ${secretDb} -n ${projectCicd} -o template --template='{{.data.username}}'|base64 -d|tr -d '\n' > username.secret"
                    sh "oc get secret ${secretDb} -n ${projectCicd} -o template --template='{{.data.url}}'|base64 -d|tr -d '\n' > url.secret"
                    def password=readFile('password.secret')
                    def username=readFile('username.secret')
                    def url=readFile('url.secret')
                    sh "rm -f *.secret"
                    sh "oc create secret generic ${appName}-${version}-db --from-literal=username=${username} --from-literal=password=${password} --from-literal=url=${url} -n ${projectTarget}"
                    sh "oc label secret/${appName}-${version}-db app=${appName}-${version} -n ${projectTarget}"
                  }
                }
              }
              stage("Deploying") {
                def dcNotPresent = false
                try {
                  sh "oc get dc ${appName}-${version} -o jsonpath='{.metadata.name}' -n ${projectTarget}"
                }catch(err){
                  dcNotPresent = true
                }

                if (dcNotPresent){
                  sh "oc tag ${projectTarget}/${appName}:${version} ${projectTarget}/${appName}:uat-${version}"
                  sh "oc new-app --docker-image=docker-registry.default.svc:5000/${projectTarget}/${appName}:uat-${version} --name=${appName}-${version} -n ${projectTarget} || true"
                  sh "oc rollout cancel dc/${appName}-${version} -n ${projectTarget} || true"
                  sh "oc rollout pause dc/${appName}-${version} -n ${projectTarget}"  
                  sh "oc set volume dc/${appName}-${version} -n ${projectTarget} --add --name=config-volume -t configmap --configmap-name=${appName}-${version}-cm --mount-path=/deployments/config || true"
                  if (secretDb !=  ""){
                      sh "oc set env --from=secret/${appName}-${version}-db --prefix=SPRING_DATASOURCE_ dc/${appName}-${version} -n ${projectTarget}"
                  }
                  //apply timezone
                  sh "oc set env dc/${appName}-${version} TZ=Asia/Bangkok -n ${projectTarget}"
                  //apply default server port
                  sh "oc set env dc/${appName}-${version} SERVER_PORT=8080 -n ${projectTarget}"
                  //configure central
                  if (springconfig != ""){
                    sh "oc set env dc/${appName}-${version} SPRING_CLOUD_CONFIG_URI=${springconfig} -n ${projectTarget}"
                  }
                  sh "oc rollout resume dc/${appName}-${version} -n ${projectTarget}"  
                  sh "oc rollout status dc/${appName}-${version} -w -n ${projectTarget}"
                  if (needRouterInternal) {
                    sh "oc create route edge ${appName}-${version}-internal  --service='${appName}-${version}' --hostname='${appName}-${version}-${projectTarget}${suffixRouterInternal}' -n ${projectTarget}"
                    sh "oc label route ${appName}-${version}-internal exposure=internal app=${appName}-${version} -n ${projectTarget}"
                  }
                  if (needRouterPartner) {
                    sh "oc create route edge ${appName}-${version}-partner --service='${appName}-${version}' --hostname='${appName}-${version}-${projectTarget}${suffixRouterPartner}' -n ${projectTarget}"
                    sh "oc label route ${appName}-${version}-partner exposure=partner app=${appName}-${version} -n ${projectTarget}"
                  }
                  if (needRouterPublic) {
                    sh "oc create route edge ${appName}-${version}-public  --service='${appName}-${version}' --hostname='${appName}-${version}-${projectTarget}${suffixRouterPublic}' -n ${projectTarget}" 
                    sh "oc label route ${appName}-${version}-public app=${appName}-${version} -n ${projectTarget}"
                  }
                }else{
                  sh "oc rollout pause dc/${appName}-${version} -n ${projectTarget}"  
                  sh "oc tag ${projectTarget}/${appName}:${version} ${projectTarget}/${appName}:uat-${version}"
                  sh "oc rollout resume dc/${appName}-${version} -n ${projectTarget}"  
                  sh "oc rollout status dc/${appName}-${version} -w -n ${projectTarget}"
                  echo "just update the image"
                }
              }
            }
            node ("image-mgmt"){
              stage("Promote"){
                timeout (time:120, unit: 'MINUTES'){
                    input message : "Promote to External Registry", ok:"Promote"
                }
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: '${projectCicd}-${externaRegistrySecret}', usernameVariable: 'REGISTRY_USERNAME', passwordVariable:"REGISTRY_TOKEN"]]){
                  def localToken = readFile('/var/run/secrets/kubernetes.io/serviceaccount/token').trim()
                  
                  openshift.withProject("${projectTarget}") {
                    def imageRegistry = openshift.selector( 'is', "${appName}").object().status.dockerImageRepository
                    echo "Promoting ${imageRegistry}:${version} -> ${extRegistry}/staging/${appName}"
                    sh """
                    set +x
                    skopeo copy --remove-signatures \
                      --src-creds openshift:${localToken} --src-cert-dir=/run/secrets/kubernetes.io/serviceaccount/ \
                      --dest-creds ${REGISTRY_USERNAME}:${REGISTRY_TOKEN}  --dest-tls-verify=false \
                      docker://${imageRegistry}:${version} docker://${extRegistry}/staging/${appName}:${version}
                    """
                  }
                }
              }
            }
          }
          } catch (err) {
              echo "in catch block"
              echo "Caught: ${err}"
              currentBuild.result = 'FAILURE'
              throw err
          } // JenkinsPipeline
      type: JenkinsPipeline
    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_WEBHOOK_SECRET}
      type: Generic