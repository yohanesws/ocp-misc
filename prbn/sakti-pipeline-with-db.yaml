apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: sakti-pipeline-with-db-template
message: >-
  A Jenkins server will be automatically instantiated in this project to manage

  the Pipeline BuildConfig created by this template.  You will be able to log in
  to

  it using your OpenShift user credentials.
metadata:
  annotations:
    description: >-
      This template showcases the new Jenkins Pipeline integration for spring
      boot in OpenShift,

      which performs continuous integration and deployment right on the
      platform.

      The template contains a Jenkinsfile - a definition of a multi-stage CI/CD
      process - that

      leverages the underlying OpenShift platform for dynamic and scalable

      builds. OpenShift integrates the status of your pipeline builds into the
      web

      console allowing you to see your entire application lifecycle in a single
      view.
    iconClass: icon-jenkins
    openshift.io/display-name: Sakti Pipeline With DB
    tags: 'instant-app,eap,jenkins'
  creationTimestamp: '2018-09-07T08:28:35Z'
  name: sakti-pipeline-with-db-template
  namespace: openshift
  resourceVersion: '6238416'
  selfLink: >-
    /apis/template.openshift.io/v1/namespaces/openshift/templates/sakti-pipeline-with-db-template
  uid: 033f0308-b278-11e8-9edd-001a4a160110
objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: '${PIPELINE_NAME}-db-secret'
      namespace: '${NAMESPACE_CICD}'
    stringData:
      HOSTNAME: '${DB_HOST}'
      PASSWORD: '${DB_PASSWORD}'
      USERNAME: '${DB_USERNAME}'
    type: Opaque
  - apiVersion: v1
    kind: Secret
    metadata:
      name: '${PIPELINE_NAME}-nexus-perben'
      namespace: '${NAMESPACE_CICD}'
    stringData:
      PASSWORD: '${NEXUS_PASSWORD}'
      USERNAME: '${NEXUS_USERNAME}'
    type: Opaque
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        name: '${PIPELINE_NAME}'
      name: '${PIPELINE_NAME}'
    spec:
      strategy:
        jenkinsPipelineStrategy:
          jenkinsfile: |-
            try {
                timeout(time: 20, unit: 'MINUTES') {
                  def appName="${APP_NAME}"
                  def projectTarget="${APP_NAMESPACE}"
                  def projectCicd="${NAMESPACE_CICD}"
                  def gitRepo="${SOURCE_REPOSITORY_URL}"
                  def branch="${SOURCE_REPOSITORY_BRANCH}"
                  def secretName="${SOURCE_REPOSITORY_CREDENTIAL_SECRET}"
                  def configMap="${CONFIG_MAP_EAP}"
                  def version=""
                  def secretDb="${PIPELINE_NAME}-db-secret"
                  def now = new Date()
                  def current = now.format("yyMMdd.HHmm", TimeZone.getTimeZone('Asia/Bangkok'))
                  def secretNexus="${PIPELINE_NAME}-nexus-perben"
                  def saktiUiNexusURL = "${SAKTI_UI_NEXUS_URL}"
                  def saktiEarNexusURL = "${SAKTI_EAP_NEXUS_URL}"
                  def projectJasper = "${JASPER_NAMESPACE}"
                  def jasperAppName = "${JASPER_APP_NAME}"

                  properties([
                    pipelineTriggers([
                        pollSCM('H/5 * * * *')
                    ])
                  ])

                  node(){
                      stage('Preparing'){
                        git branch: branch, url: gitRepo , credentialsId: "${projectCicd}-${secretName}", poll: true, changelog: true
                      }
                  }

                  node ('maven') {
                    stage("Cloning"){
                      git branch: branch, url: gitRepo , credentialsId: "${projectCicd}-${secretName}"
                      pom = readMavenPom file: 'pom.xml'
                      version=pom.version
                      if (version == "")
                        version="latest"

                      version = version.toLowerCase()
                      echo "version : ${version}"
                    }
                    //stage ("Unit Test"){
                      //sh "mvn test"
                      // step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                    //}
                    // stage("Code Analysis") {
                    //    sh "mvn sonar:sonar -Dsonar.host.url=${sonarqube} -Dsonar.login=${sonarqubeToken} -Dsonar.projectName=${PIPELINE_NAME} -DskipTests=true"
                    // } 
                    stage("Build the Source") {
                      sh "mvn -e -Popenshift install -DskipTests=true -Dcom.redhat.xpaas.repo.redhatga --batch-mode -Djava.net.preferIPv4Stack=true -Dcom.redhat.xpaas.repo.jbossorg"
                      sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                      sh "cp deployments/*.ear oc-build/deployments"
                      sh "cp -r configuration oc-build/configuration || true"
                      sh "cp -r modules oc-build/modules || true"

                      sh "mkdir -p sakti-ui-${version.toUpperCase()}-${current}/lib"
                      sh "mkdir -p sakti-ui-${version.toUpperCase()}-${current}/conf"
                      sh "cp sakti-ui/sakti-ui-main/src/main/conf/logback.xml sakti-ui-${version.toUpperCase()}-${current}/conf"
                      sh "cp sakti-ui/sakti-ui-main/SpanCompressor.jar sakti-ui-${version.toUpperCase()}-${current}"
                      sh "zip -d sakti-ui/sakti-ui-main/target/sakti-ui-main*.jar jaxws.properties"
                      sh "cp sakti-ui/sakti-ui-main/target/sakti-ui-main*.jar sakti-ui-${version.toUpperCase()}-${current}"
                      sh "cp sakti-ui/sakti-ui-main/target/lib/*.jar sakti-ui-${version.toUpperCase()}-${current}/lib"
                    }
                    stage("Build Image") {
                      sh "oc project ${projectTarget}"
                      //create EAP S2I Binary Build
                      sh "oc new-build ${NAMESPACE_BUILDER}/${IMAGE_BUILDER}:${IMAGE_VERSION} --name=${appName} --binary  -n ${projectTarget} || true"
                      // start build
                      sh "oc start-build ${appName} -n ${projectTarget} --from-dir=oc-build --follow --wait"
                      sh "oc tag ${projectTarget}/${appName}:latest ${projectTarget}/${appName}:${version}"
                    }
                    stage ("Configuring") {
                    //  def cmNotPresent = false
                    //  try {
                    //    sh "oc get cm ${appName}-${version}-cm -o jsonpath='{.metadata.name}' -n ${projectTarget}"
                    //  } catch(err) {
                    //    cmNotPresent = true
                    //  }
                    //  if (cmNotPresent){
                    //    sh "oc delete cm,secret -l app=${appName}-${version} -n ${projectTarget} || true"
                    //    sh "rm -rf files-config && mkdir -p files-config"
                    //    sh "chmod -R 777 src/main/resources"
                    //    sh "cp src/main/resources/*.properties files-config/ || true"

                        //creating configmap
                    //  sh "oc create cm ${appName}-${version}-cm --from-file=files-config/ -n ${projectTarget}"
                    //  sh "oc label cm/${appName}-${version}-cm app=${appName}-${version} -n ${projectTarget}"
                    //  }
                    
                    if(configMap != ""){
                        def cmNotPresent = false
                        try {
                          sh "oc get cm ${configMap} -o jsonpath='{.metadata.name}' -n ${projectTarget}"
                        } catch(err) {
                          cmNotPresent = true
                        }
                        if (cmNotPresent){
                          sh "oc get cm ${configMap} -n devops -o template --template='{{.data.AUTO_DEPLOY_EXPLODED}}'|tr -d '\n' > auto_deploy_exploded.cm"
                          sh "oc get cm ${configMap} -n devops -o template --template='{{.data.CONTAINER_HEAP_PERCENT}}'|tr -d '\n' > container_heap_percent.cm"
                          sh "oc get cm ${configMap} -n devops -o template --template='{{.data.INITIAL_HEAP_PERCENT}}'|tr -d '\n' > initial_heap_percent.cm"
                          sh "oc get cm ${configMap} -n devops -o template --template='{{.data.JAVA_OPTS_APPEND}}'|tr -d '\n' > java_opts_append.cm"
                          
                          def autoDeployExploded=readFile('auto_deploy_exploded.cm')
                          def containerHeapPercent=readFile('container_heap_percent.cm')
                          def initialHeapPercent=readFile('initial_heap_percent.cm')
                          def javaOptsAppend=readFile('java_opts_append.cm')
                          
                          sh "rm -f *.cm"
                          sh "oc create configmap ${configMap} --from-literal=AUTO_DEPLOY_EXPLODED='${autoDeployExploded}' --from-literal=CONTAINER_HEAP_PERCENT='${containerHeapPercent}' --from-literal=INITIAL_HEAP_PERCENT='${initialHeapPercent}' --from-literal=JAVA_OPTS_APPEND='${javaOptsAppend}' -n ${projectTarget}"
                          sh "oc label configmap/${configMap} app=${appName} -n ${projectTarget}"
                          
                        }
                     }
                     if (secretDb !=  ""){
                        def secretNotPresent = false
                        try {
                          sh "oc get secret ${appName}-${version}-db -o jsonpath='{.metadata.name}' -n ${projectTarget}"
                        }catch(err){
                          secretNotPresent = true
                        }
                        if (secretNotPresent){
                            //copying secret db
                          sh "oc get secret ${secretDb} -n ${projectCicd} -o template --template='{{.data.PASSWORD}}'|base64 -d|tr -d '\n' > password.secret"
                          sh "oc get secret ${secretDb} -n ${projectCicd} -o template --template='{{.data.USERNAME}}'|base64 -d|tr -d '\n' > username.secret"
                          sh "oc get secret ${secretDb} -n ${projectCicd} -o template --template='{{.data.HOSTNAME}}'|base64 -d|tr -d '\n' > hostname.secret"
                          def password=readFile('password.secret')
                          def username=readFile('username.secret')
                          def hostname=readFile('hostname.secret')
                          sh "rm -f *.secret"
                          //sh "oc create secret generic ${appName}-${version}-db --from-literal=USERNAME=${username} --from-literal=PASSWORD=${password} --from-literal=HOSTNAME=${hostname} -n ${projectTarget}"
                          sh "oc create secret generic ${appName}-db --from-literal=USERNAME=${username} --from-literal=PASSWORD=${password} --from-literal=HOSTNAME=${hostname} -n ${projectTarget}"
                          //sh "oc label secret/${appName}-${version}-db app=${appName} -n ${projectTarget}"
                          sh "oc label secret/${appName}-db app=${appName} -n ${projectTarget}"
                        }
                      }
                    }
                    stage("Deploying") {
                      def dcNotPresent = false
                      try {
                        //sh "oc get dc ${appName}-${version} -o jsonpath='{.metadata.name}' -n ${projectTarget}"
                        sh "oc get dc ${appName} -o jsonpath='{.metadata.name}' -n ${projectTarget}"
                      }catch(err){
                        dcNotPresent = true
                      }

                      if (dcNotPresent){
                        //sh "oc tag ${projectTarget}/${appName}:${version} ${projectTarget}/${appName}:deploy-${version}"
                        sh "oc tag ${projectTarget}/${appName}:${version} ${projectTarget}/${appName}:latest"
                        //sh "oc new-app --docker-image=docker-registry.default.svc:5000/${projectTarget}/${appName}:deploy-${version} --name=${appName}-${version} -n ${projectTarget} || true"
                        //sh "oc new-app --docker-image=docker-registry.default.svc:5000/${projectTarget}/${appName}:${version} --name=${appName} -n ${projectTarget} || true"
                        sh "oc new-app --docker-image=docker-registry.default.svc:5000/${projectTarget}/${appName}:latest --name=${appName} -n ${projectTarget} || true"
                        //sh "oc rollout cancel dc/${appName}-${version} -n ${projectTarget} || true"
                        sh "oc rollout cancel dc/${appName} -n ${projectTarget} || true"
                        //sh "oc rollout pause dc/${appName}-${version} -n ${projectTarget} || true"  
                        sh "oc rollout pause dc/${appName} -n ${projectTarget} || true"  
                        
                        // sh "oc set volume dc/${appName}-${version} -n ${projectTarget} --add --name=config-volume -t configmap --configmap-name=${appName}-${version}-cm --mount-path=/deployments/config || true"
                        if (configMap !=  ""){
                          //sh "oc set env --from=configmap/${configMap} dc/${appName}-${version} -n ${projectTarget}"
                          sh "oc set env --from=configmap/${configMap} dc/${appName} -n ${projectTarget}"
                        }
                        if (secretDb !=  ""){
                          //sh "oc set env --from=secret/${appName}-${version}-db --prefix=EXTERNAL_DATABASE_ dc/${appName}-${version} -n ${projectTarget}"
                          sh "oc set env --from=secret/${appName}-db --prefix=EXTERNAL_DATABASE_ dc/${appName} -n ${projectTarget}"
                        }
                        //apply timezone
                        //sh "oc set env dc/${appName}-${version} TZ=Asia/Bangkok -n ${projectTarget}"
                        sh "oc set env dc/${appName} TZ=Asia/Bangkok -n ${projectTarget}"

                        //sh "oc rollout resume dc/${appName}-${version} -n ${projectTarget}"
                        sh "oc rollout resume dc/${appName} -n ${projectTarget}"  
                        //sh "oc rollout status dc/${appName}-${version} -w -n ${projectTarget}"
                        sh "oc rollout status dc/${appName} -w -n ${projectTarget}"

                        //sh "oc expose svc ${appName}-${version} -n ${projectTarget}"
                        sh "oc expose svc ${appName} -n ${projectTarget} || true"
                        
                        sh "oc get route/${appName} -o jsonpath='{.spec.host}' -n ${projectTarget} > ext.temp"
                        def ext=readFile("ext.temp")
                        sh "oc set env dc/${appName} EXTERNAL_ROUTE_NAME=${ext} -n ${projectTarget}"
                        
                      }else{
                        //sh "oc rollout pause dc/${appName}-${version} -n ${projectTarget}"
                        sh "oc rollout pause dc/${appName} -n ${projectTarget}"  
                        //sh "oc tag ${projectTarget}/${appName}:${version} ${projectTarget}/${appName}:deploy-${version}"
                        sh "oc tag ${projectTarget}/${appName}:${version} ${projectTarget}/${appName}:latest"
                        //sh "oc rollout resume dc/${appName}-${version} -n ${projectTarget}"
                        sh "oc rollout resume dc/${appName} -n ${projectTarget}"  
                        //sh "oc rollout status dc/${appName}-${version} -w -n ${projectTarget}"
                        sh "oc rollout status dc/${appName} -w -n ${projectTarget}"
                        echo "just update the image"
                      }
                    }
                    stage("Deploying to nexus") {
                        sh "oc get route/${appName} -o jsonpath='{.spec.host}' -n ${projectTarget} > route.temp"
                        def route=readFile('route.temp')
                        sh "echo 'jaxws.endpoint.address=http\\://${route}' > sakti-ui-${version.toUpperCase()}-${current}/conf/jaxws.properties"
                        
                        sh "oc get route/${jasperAppName} -o jsonpath='{.spec.host}' -n ${projectJasper} > routeJasper.temp"
                        def routeJasper=readFile('routeJasper.temp')
                        sh "echo 'jasperreport.url=http\\://${routeJasper}/jasperserver/services/repository' > sakti-ui-${version.toUpperCase()}-${current}/sakti2-config.properties"
                        
                        sh "echo 'jasperreport.userName=jasperadmin' >> sakti-ui-${version.toUpperCase()}-${current}/sakti2-config.properties"
                        sh "echo 'jasperreport.password=jasperadmin' >> sakti-ui-${version.toUpperCase()}-${current}/sakti2-config.properties"
                        sh "echo 'sftp.isLocal=false' >> sakti-ui-${version.toUpperCase()}-${current}/sakti2-config.properties"
                        sh "echo 'sftp.directory=/home/spanftp2/sakti_app/adk' >> sakti-ui-${version.toUpperCase()}-${current}/sakti2-config.properties"
                        sh "echo 'sftp.password=spanftp2' >> sakti-ui-${version.toUpperCase()}-${current}/sakti2-config.properties"
                        sh "echo 'sftp.userName=spanftp2' >> sakti-ui-${version.toUpperCase()}-${current}/sakti2-config.properties"
                        sh "echo 'sftp.url=10.242.143.72' >> sakti-ui-${version.toUpperCase()}-${current}/sakti2-config.properties"
                        sh "echo 'sftp.port=22' >> sakti-ui-${version.toUpperCase()}-${current}/sakti2-config.properties"
                        sh "echo 'database.type=oracle' >> sakti-ui-${version.toUpperCase()}-${current}/sakti2-config.properties"

                        sh "ls -ltr sakti-ui-${version.toUpperCase()}-${current} | grep 'sakti-ui-main.*\\.jar\$' | awk '{print \$9}' > filename.temp"
                        def filename=readFile('filename.temp')

                        sh "rm -f *.temp"
                        sh "echo 'java -DsuppressSwingDropSupport=true -Xmx1024m -Xms1024m -XX:PermSize=512m -Duser.timezone=Asia/Jakarta -jar ${filename}' > sakti-ui-${version.toUpperCase()}-${current}/runsakti.sh"
                        sh "echo 'java -DsuppressSwingDropSupport=true -Xmx1024m -Xms1024m -XX:PermSize=512m -Duser.timezone=Asia/Jakarta -jar ${filename}' > sakti-ui-${version.toUpperCase()}-${current}/runsakti.bat"
                        sh "zip -r sakti-ear-${version.toUpperCase()}-${current}.zip deployments"
                        sh "zip -r sakti-ui-${version.toUpperCase()}-${current}.zip sakti-ui-${version.toUpperCase()}-${current}"
                        sh "oc get secret ${secretNexus} -n ${projectCicd} -o template --template='{{.data.USERNAME}}'|base64 -d|tr -d '\n' > user.secret"
                        sh "oc get secret ${secretNexus} -n ${projectCicd} -o template --template='{{.data.PASSWORD}}'|base64 -d|tr -d '\n' > pass.secret"
                        def user=readFile('user.secret')
                        def pass=readFile('pass.secret')
                        sh "curl -v -u ${user}:${pass} --upload-file sakti-ui-${version.toUpperCase()}-${current}.zip ${saktiUiNexusURL}"
                        sh "curl -v -u ${user}:${pass} --upload-file sakti-ear-${version.toUpperCase()}-${current}.zip ${saktiEarNexusURL}"
                    }
                  }
              }
            } catch (err) {
                echo "in catch block"
                echo "Caught: ${err}"
                currentBuild.result = 'FAILURE'
                throw err
            } // JenkinsPipeline
        type: JenkinsPipeline
      triggers:
        - github:
            secret: '${GITHUB_WEBHOOK_SECRET}'
          type: GitHub
        - generic:
            secret: '${GENERIC_WEBHOOK_SECRET}'
          type: Generic
parameters:
  - description: The name assigned to pipeline defined in this template.
    displayName: Pipeline Name
    name: PIPELINE_NAME
    required: true
  - description: The name assigned to application defined in this template.
    displayName: Application Name
    name: APP_NAME
    required: true
  - description: The namespace/project of which the application is assigned.
    displayName: Application Namespace/Project
    name: APP_NAMESPACE
    required: true
  - description: The database Hostname of database defined in this template
    displayName: Database Name
    name: DB_HOST
    required: true
  - description: The username of database defined in this template.
    displayName: Database Username
    name: DB_USERNAME
    required: true
  - description: The password of database defined in this template.
    displayName: Database Password
    name: DB_PASSWORD
    required: true
  - description: The namespace/project of which jasperserver application is assigned.
    displayName: JasperServer Application Namespace/Project
    name: JASPER_NAMESPACE
    required: true
  - description: The name of jasperserver application in jasperserver namespace/project
    displayName: JasperServer Application Name
    name: JASPER_APP_NAME
    required: true
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
  - description: The Branch of the repository with your application source code.
    displayName: Git Repository Branch
    name: SOURCE_REPOSITORY_BRANCH
    required: true
  - description: Git Credential Secret.
    displayName: Git Secret Credential
    name: SOURCE_REPOSITORY_CREDENTIAL_SECRET
    required: true
    value: gitlab-perben
  - description: >-
      The configmap name from this namespace that need to load to assigend
      namespace as environment variable.
    displayName: Config Map EAP
    name: CONFIG_MAP_EAP
    required: true
  - description: The username of nexus defined in this template.
    displayName: Nexus Username
    name: NEXUS_USERNAME
    required: true
    value: admin
  - description: The password of nexus defined in this template.
    displayName: Nexus Password
    name: NEXUS_PASSWORD
    required: true
    value: admin123
  - description: URL to deploy sakti ear to nexus
    displayName: Sakti EAR Nexus Url
    name: SAKTI_EAP_NEXUS_URL
    required: true
  - description: URL to deploy sakti ui to nexus
    displayName: Sakti UI Nexus Url
    name: SAKTI_UI_NEXUS_URL
    required: true
  - description: The OpenShift Namespace where the jenkins running.
    displayName: Namespace CICD
    name: NAMESPACE_CICD
    required: true
    value: devops
  - description: The OpenShift Namespace where the builder ImageStreams reside.
    displayName: Namespace Builder
    name: NAMESPACE_BUILDER
    required: true
    value: openshift
  - description: The name of OpenJDK builder ImageStreams to used.
    displayName: EAP Builder
    name: IMAGE_BUILDER
    required: true
    value: jboss-eap71-openshift
  - description: The version of OpenJDK builder ImageStreams to used.
    displayName: Version Builder
    name: IMAGE_VERSION
    required: true
    value: '1.3'
  - description: >-
      Github trigger secret.  A difficult to guess string encoded as part of the
      webhook URL.  Not encrypted.
    displayName: GitHub Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: A secret string used to configure the Generic webhook.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
