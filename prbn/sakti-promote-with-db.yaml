apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: sakti-promote-pipeline-with-db-template
message: >-
  A Jenkins server will be automatically instantiated in this project to manage

  the Pipeline BuildConfig created by this template.  You will be able to log in
  to

  it using your OpenShift user credentials.
metadata:
  annotations:
    description: >-
      This template showcases the new Jenkins Pipeline integration for spring
      boot in OpenShift,

      which performs continuous integration and deployment right on the
      platform.

      The template contains a Jenkinsfile - a definition of a multi-stage CI/CD
      process - that

      leverages the underlying OpenShift platform for dynamic and scalable

      builds. OpenShift integrates the status of your pipeline builds into the
      web

      console allowing you to see your entire application lifecycle in a single
      view.
    iconClass: icon-jenkins
    openshift.io/display-name: Sakti Promote DEV to UT Pipeline
    tags: 'instant-app,promote,jenkins'
  creationTimestamp: '2018-09-07T09:04:54Z'
  name: sakti-promote-pipeline-with-db-template
  namespace: openshift
  resourceVersion: '13204273'
  selfLink: >-
    /apis/template.openshift.io/v1/namespaces/openshift/templates/sakti-promote-pipeline-with-db-template
  uid: 15edc82d-b27d-11e8-9edd-001a4a160110
objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: '${PIPELINE_NAME}-db-secret'
      namespace: '${NAMESPACE_CICD}'
    stringData:
      HOSTNAME: '${DB_HOST}'
      PASSWORD: '${DB_PASSWORD}'
      USERNAME: '${DB_USERNAME}'
    type: Opaque
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        name: '${PIPELINE_NAME}'
      name: '${PIPELINE_NAME}'
    spec:
      strategy:
        jenkinsPipelineStrategy:
          jenkinsfile: |-
            try {
                timeout(time: 20, unit: 'MINUTES') {
                  def appName="${APP_NAME}"
                  def projectTarget="${DEST_APP_NAMESPACE}"
                  def projectSource="${SOURCE_APP_NAMESPACE}"
                  def configMap="${CONFIG_MAP_EAP}"
                  def secretDb="${PIPELINE_NAME}-db-secret"
                  def namespaceCICD="${NAMESPACE_CICD}"
                  def version=""
                  def now = new Date()
                  def current = now.format("yyyyMMdd.HHmm", TimeZone.getTimeZone('Asia/Bangkok'))
                  def secretNexus = "${SECRET_NEXUS}"
                  def sourceSaktiEarNexusURL = "${SOURCE_SAKTI_EAP_NEXUS_URL}"
                  def sourceSaktiUiNexusURL = "${SOURCE_SAKTI_UI_NEXUS_URL}"
                  def targetSaktiUiNexusURL = "${TARGET_SAKTI_UI_NEXUS_URL}"
                  def targetSaktiEarNexusURL = "${TARGET_SAKTI_EAP_NEXUS_URL}"
                  def projectJasper = "${JASPER_NAMESPACE}"
                  def jasperAppName = "${JASPER_APP_NAME}"

                  node () {
                    stage("Preparing"){
                     //sh "oc get is/${appName} -o jsonpath='{.spec.tags.*.name}' -n ${projectSource} > version"
                     sh "oc get is/${appName} -o jsonpath='{.spec.tags[?(@.name != \"latest\")].name}' -n ${projectSource} > version"
                     versions = readFile('version')
                     
                     versions = versions.replaceAll("\\s","\n")
                     timeout (time:10, unit: 'MINUTES'){
                       env.VERSION = input message : "promote ${APP_NAME} from ${SOURCE_APP_NAMESPACE} to ${DEST_APP_NAMESPACE}", ok:"Promote",
                                                parameters: [choice(name:'VERSION', choices:versions, description: 'Name App to Promote')]
                      }
                      version=env.VERSION
                      echo "version selected ${version}"
                    }
                    
                    stage("Move Image") {
                       sh "oc tag ${projectSource}/${appName}:${version} ${projectTarget}/${appName}:${version}"
                    }
                    stage ("Configuring") {
                      if (configMap!=""){
                         sh "oc export cm/${configMap} -n ${projectSource} | oc create -n ${projectTarget} -f -|| true"
                      }

                      if (secretDb!=""){
                         sh "oc export secret/${secretDb} -n ${namespaceCICD} | oc create -n ${projectTarget} -f -|| true"
                      }
                      
                    }
                    stage("Deploying") {
                      def dcNotPresent = false
                      try {
                        //sh "oc get dc ${appName}-${version} -o jsonpath='{.metadata.name}' -n ${projectTarget}"
                        sh "oc get dc ${appName} -o jsonpath='{.metadata.name}' -n ${projectTarget}"
                      }catch(err){
                        dcNotPresent = true
                      }

                      if (dcNotPresent){
                        sh "oc tag ${projectTarget}/${appName}:${version} ${projectTarget}/${appName}:latest"
                        //sh "oc new-app --docker-image=docker-registry.default.svc:5000/${projectTarget}/${appName}:deploy-${version} --name=${appName}-${version} -n ${projectTarget} || true"
                        //sh "oc new-app --docker-image=docker-registry.default.svc:5000/${projectTarget}/${appName}:${version} --name=${appName} -n ${projectTarget} || true"
                        sh "oc new-app --docker-image=docker-registry.default.svc:5000/${projectTarget}/${appName}:latest --name=${appName} -n ${projectTarget} || true"
                        //sh "oc rollout cancel dc/${appName}-${version} -n ${projectTarget} || true"
                        sh "oc rollout cancel dc/${appName} -n ${projectTarget} || true"
                        //sh "oc rollout pause dc/${appName}-${version} -n ${projectTarget}"
                        sh "oc rollout pause dc/${appName} -n ${projectTarget}"  
                        
                        // sh "oc set volume dc/${appName}-${version} -n ${projectTarget} --add --name=config-volume -t configmap --configmap-name=${appName}-${version}-cm --mount-path=/deployments/config || true"
                        if (configMap !=  ""){
                          //sh "oc set env --from=configmap/${configMap} dc/${appName}-${version} -n ${projectTarget}"
                          sh "oc set env --from=configmap/${configMap} dc/${appName} -n ${projectTarget}"
                        }
                        if (secretDb !=  ""){
                          //sh "oc set env --from=secret/${secretDb} --prefix=EXTERNAL_DATABASE_ dc/${appName}-${version} -n ${projectTarget}"
                          sh "oc set env --from=secret/${secretDb} --prefix=EXTERNAL_DATABASE_ dc/${appName} -n ${projectTarget}"
                        }
                        //apply timezone
                        //sh "oc set env dc/${appName}-${version} TZ=Asia/Bangkok -n ${projectTarget}"
                        sh "oc set env dc/${appName} TZ=Asia/Bangkok -n ${projectTarget}"

                        //setting resources
                        sh "oc set resources DeploymentConfig ${appName} -n ${projectTarget} -c ${appName} --requests='cpu=500m,memory=1024Mi' --limits='cpu=2000m,memory=6Gi' || true"
                        sh "oc autoscale dc/${appName} -n ${projectTarget} --min 1 --max 6 --cpu-percent=75 || true"
                        
                        //setting healthcheck
                        sh "oc set probe dc/${appName} -n ${projectTarget} --initial-delay-seconds=10 --timeout-seconds=1 --readiness -- /bin/bash -c /opt/eap/bin/readinessProbe.sh"
                        sh "oc set probe dc/${appName} -n ${projectTarget} --initial-delay-seconds=90 --timeout-seconds=1 --liveness -- /bin/bash -c /opt/eap/bin/livenessProbe.sh"
                        
                        //sh "oc rollout resume dc/${appName}-${version} -n ${projectTarget}"
                        sh "oc rollout resume dc/${appName} -n ${projectTarget}"  
                        //sh "oc rollout status dc/${appName}-${version} -w -n ${projectTarget}"
                        sh "oc rollout status dc/${appName} -w -n ${projectTarget}"

                        //sh "oc expose svc ${appName}-${version} -n ${projectTarget}"
                        sh "oc expose svc ${appName} -n ${projectTarget} || true"
                        
                        sh "oc get route/${appName} -o jsonpath='{.spec.host}' -n ${projectTarget} > ext.temp"
                        def ext=readFile("ext.temp")
                        sh "oc set env dc/${appName} EXTERNAL_ROUTE_NAME=${ext} -n ${projectTarget}"
                        //increase time out
                        sh "oc annotate route/${appName} -n ${projectTarget} --overwrite haproxy.router.openshift.io/timeout=240000ms"
                      }else{
                        //sh "oc rollout pause dc/${appName}-${version} -n ${projectTarget}"
                        sh "oc rollout pause dc/${appName} -n ${projectTarget}"  
                        //sh "oc tag ${projectTarget}/${appName}:${version} ${projectTarget}/${appName}:deploy-${version}"
                        sh "oc tag ${projectTarget}/${appName}:${version} ${projectTarget}/${appName}:latest"
                        
                        //setting healthcheck
                        sh "oc set probe dc/${appName} -n ${projectTarget} --initial-delay-seconds=10 --timeout-seconds=1 --readiness -- /bin/bash -c /opt/eap/bin/readinessProbe.sh"
                        sh "oc set probe dc/${appName} -n ${projectTarget} --initial-delay-seconds=90 --timeout-seconds=1 --liveness -- /bin/bash -c /opt/eap/bin/livenessProbe.sh"
                        
                        //sh "oc rollout resume dc/${appName}-${version} -n ${projectTarget}"
                        sh "oc rollout resume dc/${appName} -n ${projectTarget}"  
                        //sh "oc rollout status dc/${appName}-${version} -w -n ${projectTarget}"
                        sh "oc rollout status dc/${appName} -w -n ${projectTarget}"
                        echo "just update the image"
                      }
                    }
                    stage("Promote") {
                        sh "curl GET ${sourceSaktiEarNexusURL} > eardev.xml"
                        sh "curl GET ${sourceSaktiUiNexusURL} > uidev.xml"
                        
                        def ui=readFile("uidev.xml")
                        def ear=readFile("eardev.xml")
                        
                        def resultUI = extractFunction(ui)
                        def resultEAR = extractFunction(ear)
                        
                        def fileNameUI = resultUI.filename
                        def downloadUrlUI = resultUI.url
                        def fileNameEAR = resultEAR.filename
                        def downloadUrlEAR = resultEAR.url
                        
                        sh "oc get secret ${secretNexus} -n ${namespaceCICD} -o template --template='{{.data.USERNAME}}'|base64 -d|tr -d '\n' > user.secret"
                        sh "oc get secret ${secretNexus} -n ${namespaceCICD} -o template --template='{{.data.PASSWORD}}'|base64 -d|tr -d '\n' > pass.secret"
                        def user=readFile('user.secret')
                        def pass=readFile('pass.secret')
                        
                        sh "curl -X GET -u ${user}:${pass} ${downloadUrlUI} -O"
                        sh "curl -X GET -u ${user}:${pass} ${downloadUrlEAR} -O"
                        
                        sh "unzip -o ${fileNameUI}"
                        sh "oc get route/${appName} -o jsonpath='{.spec.host}' -n ${projectTarget} > route.temp"
                        def route=readFile('route.temp')
                        def fileWithoutExt = fileNameUI.substring(0, fileNameUI.length()-4)
                        
                        sh "echo 'jaxws.endpoint.address=http\\://${route}' > ${fileWithoutExt}/conf/jaxws.properties"
                        
                        sh "oc get route/${jasperAppName} -o jsonpath='{.spec.host}' -n ${projectJasper} > routeJasper.temp"
                        def routeJasper=readFile('routeJasper.temp')
                        sh "echo 'jasperreport.url=http\\://${routeJasper}/jasperserver/services/repository' > ${fileWithoutExt}/sakti2-config.properties"
                        sh "echo 'jasperreport.userName=jasperadmin' >> ${fileWithoutExt}/sakti2-config.properties"
                        sh "echo 'jasperreport.password=jasperadmin' >> ${fileWithoutExt}/sakti2-config.properties"
                        sh "echo 'sftp.isLocal=false' >> ${fileWithoutExt}/sakti2-config.properties"
                        sh "echo 'sftp.directory=/home/spanftp2/sakti_app/adk' >> ${fileWithoutExt}/sakti2-config.properties"
                        sh "echo 'sftp.password=spanftp2' >> ${fileWithoutExt}/sakti2-config.properties"
                        sh "echo 'sftp.userName=spanftp2' >> ${fileWithoutExt}/sakti2-config.properties"
                        //sftp url changes
                        sh "echo 'sftp.url=10.100.88.41' >> ${fileWithoutExt}/sakti2-config.properties"
                        sh "echo 'sftp.port=22' >> ${fileWithoutExt}/sakti2-config.properties"
                        sh "echo 'database.type=oracle' >> ${fileWithoutExt}/sakti2-config.properties"
                        
                        sh "rm -f *.temp"
                        sh "zip -r sakti-ui-${version.toUpperCase()}-${current}-from-${fileWithoutExt}.zip ${fileWithoutExt}"
                        sh "mv ${fileNameEAR} sakti-ear-${version.toUpperCase()}-${current}-from-${fileNameEAR}"
                        
                        sh "curl -v -u ${user}:${pass} --upload-file sakti-ui-${version.toUpperCase()}-${current}-from-${fileNameUI} ${targetSaktiUiNexusURL}"
                        sh "curl -v -u ${user}:${pass} --upload-file sakti-ear-${version.toUpperCase()}-${current}-from-${fileNameEAR} ${targetSaktiEarNexusURL}"
                        echo "AAA"
                    }
                  }
              }
            } catch (err) {
                echo "in catch block"
                echo "Caught: ${err}"
                currentBuild.result = 'FAILURE'
                throw err
            } // JenkinsPipeline
            @NonCPS
            Map extractFunction(def file) {
                try {
                    def response = new XmlSlurper().parseText(file)
                    def size = response.data.'content-item'.size()-1
                    def downloadURL = response.data.'content-item'[size].resourceURI.text()
                    def fileName = response.data.'content-item'[size].text.text()
                    return [url:downloadURL, filename:fileName]
                } catch (Exception e) {
                    echo "in catch block"
                    echo "Caught: ${e}"
                    currentBuild.result = 'FAILURE'
                    throw e
                }
            }
        type: JenkinsPipeline
      triggers:
        - github:
            secret: '${GITHUB_WEBHOOK_SECRET}'
          type: GitHub
        - generic:
            secret: '${GENERIC_WEBHOOK_SECRET}'
          type: Generic
parameters:
  - description: The name assigned to pipeline defined in this template.
    displayName: Pipeline Name
    name: PIPELINE_NAME
    required: true
  - description: The name assigned to application defined in this template.
    displayName: Application Name
    name: APP_NAME
    required: true
  - description: The namespace/project of which the application is running now.
    displayName: Source Application Namespace/Project
    name: SOURCE_APP_NAMESPACE
    required: true
  - description: The namespace/project of which the application is move to.
    displayName: Destinatition Application Namespace/Project
    name: DEST_APP_NAMESPACE
    required: true
  - description: >-
      The configmap name from source namespace that need to load as environment
      variable.
    displayName: Config Map EAP
    name: CONFIG_MAP_EAP
    required: true
  - description: The secret of credential nexus to load from this namespace.
    displayName: Secret Nexus
    name: SECRET_NEXUS
    required: true
  - description: The database Hostname of database defined in this template
    displayName: Database Name
    name: DB_HOST
    required: true
  - description: The username of database defined in this template.
    displayName: Database Username
    name: DB_USERNAME
    required: true
  - description: The password of database defined in this template.
    displayName: Database Password
    name: DB_PASSWORD
    required: true
  - description: The namespace/project of which jasperserver application is assigned.
    displayName: JasperServer Application Namespace/Project
    name: JASPER_NAMESPACE
    required: true
  - description: The name of jasperserver application in jasperserver namespace/project
    displayName: JasperServer Application Name
    name: JASPER_APP_NAME
    required: true
  - description: Source URL to get sakti ear from nexus
    displayName: Source of Sakti EAR Nexus Url
    name: SOURCE_SAKTI_EAP_NEXUS_URL
    required: true
  - description: Source URL to get sakti ui from nexus
    displayName: Source of Sakti UI Nexus Url
    name: SOURCE_SAKTI_UI_NEXUS_URL
    required: true
  - description: Target URL to deploy sakti ear to nexus
    displayName: Target of Sakti EAR Nexus Url
    name: TARGET_SAKTI_EAP_NEXUS_URL
    required: true
  - description: Target URL to deploy sakti ui to nexus
    displayName: Target of Sakti UI Nexus Url
    name: TARGET_SAKTI_UI_NEXUS_URL
    required: true
  - description: The OpenShift Namespace where the jenkins running.
    displayName: Namespace CICD
    name: NAMESPACE_CICD
    required: true
    value: devops
  - description: >-
      Github trigger secret.  A difficult to guess string encoded as part of the
      webhook URL.  Not encrypted.
    displayName: GitHub Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: A secret string used to configure the Generic webhook.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
