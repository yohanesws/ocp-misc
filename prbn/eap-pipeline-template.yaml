apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: eap-pipeline-template
message: >-
  A Jenkins server will be automatically instantiated in this project to manage

  the Pipeline BuildConfig created by this template.  You will be able to log in
  to

  it using your OpenShift user credentials.
metadata:
  annotations:
    description: >-
      This template showcases the new Jenkins Pipeline integration for spring
      boot in OpenShift,

      which performs continuous integration and deployment right on the
      platform.

      The template contains a Jenkinsfile - a definition of a multi-stage CI/CD
      process - that

      leverages the underlying OpenShift platform for dynamic and scalable

      builds. OpenShift integrates the status of your pipeline builds into the
      web

      console allowing you to see your entire application lifecycle in a single
      view.
    iconClass: icon-jenkins
    openshift.io/display-name: EAP Pipeline Generic
    tags: 'instant-app,eap,jenkins'
  creationTimestamp: '2018-08-28T07:08:20Z'
  name: eap-pipeline-template
  namespace: openshift
  resourceVersion: '3968800'
  selfLink: >-
    /apis/template.openshift.io/v1/namespaces/openshift/templates/eap-pipeline-template
  uid: 25465c92-aa91-11e8-ae55-001a4a160110
objects:
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        name: '${PIPELINE_NAME}'
      name: '${PIPELINE_NAME}'
    spec:
      strategy:
        jenkinsPipelineStrategy:
          jenkinsfile: |-
            try {
                timeout(time: 20, unit: 'MINUTES') {
                  def appName="${APP_NAME}"
                  def projectTarget="${APP_NAMESPACE}"
                  def projectCicd="${NAMESPACE_CICD}"
                  def gitRepo="${SOURCE_REPOSITORY_URL}"
                  def branch="${SOURCE_REPOSITORY_BRANCH}"
                  def secretName="${SOURCE_REPOSITORY_CREDENTIAL_SECRET}"
                  def configMap="${CONFIG_MAP_EAP}"
                  def version=""


                  properties([
                    pipelineTriggers([
                        pollSCM('H/5 * * * *')
                    ])
                  ])

                  node(){
                      stage('Preparing'){
                        git branch: branch, url: gitRepo , credentialsId: "${projectCicd}-${secretName}", poll: true, changelog: true
                      }
                  }

                  node ('maven') {
                    stage("Cloning"){
                      git branch: branch, url: gitRepo , credentialsId: "${projectCicd}-${secretName}"
                      pom = readMavenPom file: 'pom.xml'
                      version=pom.version
                      if (version == "")
                        version="latest"
                      
                      version = version.toLowerCase()
                      echo "version : ${version}"
                    }
                    stage ("Unit Test"){
                      sh "mvn test"
                      // step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                    }
                    // stage("Code Analysis") {
                    //    sh "mvn sonar:sonar -Dsonar.host.url=${sonarqube} -Dsonar.login=${sonarqubeToken} -Dsonar.projectName=${PIPELINE_NAME} -DskipTests=true"
                    // } 
                    stage("Build the Source") {
                      sh "mvn install -DskipTests=true"
                      sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                      sh "cp deployments/*.ear oc-build/deployments"
                      sh "cp -r configuration oc-build/configuration || true"
                      sh "cp -r modules oc-build/modules || true"
                    }
                    stage("Build Image") {
                      sh "oc project ${projectTarget}"
                      //create EAP S2I Binary Build
                      sh "oc new-build ${NAMESPACE_BUILDER}/${IMAGE_BUILDER}:${IMAGE_VERSION} --name=${appName} --binary  -n ${projectTarget} || true"
                      // start build
                      sh "oc start-build ${appName} -n ${projectTarget} --from-dir=oc-build --follow --wait"
                      sh "oc tag ${projectTarget}/${appName}:latest ${projectTarget}/${appName}:${version}"
                    }
                    stage ("Configuring") {
                    //  def cmNotPresent = false
                    //  try {
                    //    sh "oc get cm ${appName}-${version}-cm -o jsonpath='{.metadata.name}' -n ${projectTarget}"
                    //  } catch(err) {
                    //    cmNotPresent = true
                    //  }
                    //  if (cmNotPresent){
                    //    sh "oc delete cm,secret -l app=${appName}-${version} -n ${projectTarget} || true"
                    //    sh "rm -rf files-config && mkdir -p files-config"
                    //    sh "chmod -R 777 src/main/resources"
                    //    sh "cp src/main/resources/*.properties files-config/ || true"

                        //creating configmap
                    //  sh "oc create cm ${appName}-${version}-cm --from-file=files-config/ -n ${projectTarget}"
                    //  sh "oc label cm/${appName}-${version}-cm app=${appName}-${version} -n ${projectTarget}"
                    //  }
                    
                      if(configMap != ""){
                        def cmNotPresent = false
                        try {
                          sh "oc get cm ${configMap} -o jsonpath='{.metadata.name}' -n ${projectTarget}"
                        } catch(err) {
                          cmNotPresent = true
                        }
                        if (cmNotPresent){
                          sh "oc get cm ${configMap} -n devops -o template --template='{{.data.AUTO_DEPLOY_EXPLODED}}'|tr -d '\n' > auto_deploy_exploded.cm"
                          sh "oc get cm ${configMap} -n devops -o template --template='{{.data.CONTAINER_HEAP_PERCENT}}'|tr -d '\n' > container_heap_percent.cm"
                          sh "oc get cm ${configMap} -n devops -o template --template='{{.data.INITIAL_HEAP_PERCENT}}'|tr -d '\n' > initial_heap_percent.cm"
                          sh "oc get cm ${configMap} -n devops -o template --template='{{.data.JAVA_OPTS_APPEND}}'|tr -d '\n' > java_opts_append.cm"
                          
                          def autoDeployExploded=readFile('auto_deploy_exploded.cm')
                          def containerHeapPercent=readFile('container_heap_percent.cm')
                          def initialHeapPercent=readFile('initial_heap_percent.cm')
                          def javaOptsAppend=readFile('java_opts_append.cm')
                          
                          sh "rm -f *.cm"
                          sh "oc create configmap ${configMap} --from-literal=AUTO_DEPLOY_EXPLODED='${autoDeployExploded}' --from-literal=CONTAINER_HEAP_PERCENT='${containerHeapPercent}' --from-literal=INITIAL_HEAP_PERCENT='${initialHeapPercent}' --from-literal=JAVA_OPTS_APPEND='${javaOptsAppend}' -n ${projectTarget}"
                          sh "oc label configmap/${configMap} app=${appName} -n ${projectTarget}"
                          
                        }
                      }
                    }
                    stage("Deploying") {
                      def dcNotPresent = false
                      try {
                        sh "oc get dc ${appName}-${version} -o jsonpath='{.metadata.name}' -n ${projectTarget}"
                      }catch(err){
                        dcNotPresent = true
                      }

                      if (dcNotPresent){
                        sh "oc tag ${projectTarget}/${appName}:${version} ${projectTarget}/${appName}:deploy-${version}"
                        //sh "oc new-app --docker-image=docker-registry.default.svc:5000/${projectTarget}/${appName}:deploy-${version} --name=${appName}-${version} -n ${projectTarget} || true"
                        sh "oc new-app --docker-image=docker-registry.default.svc:5000/${projectTarget}/${appName}:deploy-${version} --name=${appName} -n ${projectTarget} || true"
                        //sh "oc rollout cancel dc/${appName}-${version} -n ${projectTarget} || true"
                        sh "oc rollout cancel dc/${appName} -n ${projectTarget} || true"
                        //sh "oc rollout pause dc/${appName}-${version} -n ${projectTarget}"  
                        sh "oc rollout pause dc/${appName} -n ${projectTarget}"  
                        
                        // sh "oc set volume dc/${appName}-${version} -n ${projectTarget} --add --name=config-volume -t configmap --configmap-name=${appName}-${version}-cm --mount-path=/deployments/config || true"
                        if (configMap !=  ""){
                          //sh "oc set env --from=configmap/${configMap} dc/${appName}-${version} -n ${projectTarget}"
                          sh "oc set env --from=configmap/${configMap} dc/${appName} -n ${projectTarget}"
                        }
                        //apply timezone
                        //sh "oc set env dc/${appName}-${version} TZ=Asia/Bangkok -n ${projectTarget}"
                        sh "oc set env dc/${appName} TZ=Asia/Bangkok -n ${projectTarget}"

                        //sh "oc rollout resume dc/${appName}-${version} -n ${projectTarget}"
                        sh "oc rollout resume dc/${appName} -n ${projectTarget}"  
                        //sh "oc rollout status dc/${appName}-${version} -w -n ${projectTarget}"
                        sh "oc rollout status dc/${appName} -w -n ${projectTarget}"

                        //sh "oc expose svc ${appName}-${version} -n ${projectTarget}"
                        sh "oc expose svc ${appName} -n ${projectTarget} || true"
                        
                      }else{
                        //sh "oc rollout pause dc/${appName}-${version} -n ${projectTarget}"
                        sh "oc rollout pause dc/${appName} -n ${projectTarget}"  
                        sh "oc tag ${projectTarget}/${appName}:${version} ${projectTarget}/${appName}:deploy-${version}"
                        //sh "oc rollout resume dc/${appName}-${version} -n ${projectTarget}"
                        sh "oc rollout resume dc/${appName} -n ${projectTarget}"  
                        //sh "oc rollout status dc/${appName}-${version} -w -n ${projectTarget}"
                        sh "oc rollout status dc/${appName} -w -n ${projectTarget}"
                        echo "just update the image"
                      }
                    }
                  }
              }
            } catch (err) {
                echo "in catch block"
                echo "Caught: ${err}"
                currentBuild.result = 'FAILURE'
                throw err
            } // JenkinsPipeline
        type: JenkinsPipeline
      triggers:
        - github:
            secret: '${GITHUB_WEBHOOK_SECRET}'
          type: GitHub
        - generic:
            secret: '${GENERIC_WEBHOOK_SECRET}'
          type: Generic
parameters:
  - description: The name assigned to pipeline defined in this template.
    displayName: Pipeline Name
    name: PIPELINE_NAME
    required: true
  - description: The name assigned to application defined in this template.
    displayName: Application Name
    name: APP_NAME
    required: true
  - description: The namespace/project of which the application is assigned.
    displayName: Application Namespace/Project
    name: APP_NAMESPACE
    required: true
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
  - description: The Branch of the repository with your application source code.
    displayName: Git Repository Branch
    name: SOURCE_REPOSITORY_BRANCH
    required: true
  - description: Git Credential Secret.
    displayName: Git Secret Credential
    name: SOURCE_REPOSITORY_CREDENTIAL_SECRET
    required: true
    value: gitlab-perben
  - description: The configmap name that need to load as environment variable.
    displayName: Config Map EAP
    name: CONFIG_MAP_EAP
  - description: The OpenShift Namespace where the jenkins running.
    displayName: Namespace CICD
    name: NAMESPACE_CICD
    required: true
    value: devops
  - description: The OpenShift Namespace where the builder ImageStreams reside.
    displayName: Namespace Builder
    name: NAMESPACE_BUILDER
    required: true
    value: openshift
  - description: The name of OpenJDK builder ImageStreams to used.
    displayName: EAP Builder
    name: IMAGE_BUILDER
    required: true
    value: jboss-eap71-openshift
  - description: The version of OpenJDK builder ImageStreams to used.
    displayName: Version Builder
    name: IMAGE_VERSION
    required: true
    value: '1.3'
  - description: >-
      Github trigger secret.  A difficult to guess string encoded as part of the
      webhook URL.  Not encrypted.
    displayName: GitHub Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: A secret string used to configure the Generic webhook.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
